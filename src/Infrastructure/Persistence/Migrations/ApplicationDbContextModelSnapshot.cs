// <auto-generated />
using System;
using System.Collections.Generic;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Boards.Board", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_boards");

                    b.HasIndex("TeamId")
                        .IsUnique()
                        .HasDatabaseName("ix_boards_team_id");

                    b.ToTable("boards", (string)null);
                });

            modelBuilder.Entity("Domain.Boards.BoardCard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BoardColumnId")
                        .HasColumnType("uuid")
                        .HasColumnName("board_column_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("WorkItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("work_item_id");

                    b.HasKey("Id")
                        .HasName("pk_board_cards");

                    b.HasIndex("BoardColumnId")
                        .HasDatabaseName("ix_board_cards_board_column_id");

                    b.HasIndex("WorkItemId")
                        .HasDatabaseName("ix_board_cards_work_item_id");

                    b.ToTable("board_cards", (string)null);
                });

            modelBuilder.Entity("Domain.Boards.BoardColumn", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("uuid")
                        .HasColumnName("board_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DefinitionOfDone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("definition_of_done");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("WipLimit")
                        .HasColumnType("integer")
                        .HasColumnName("wip_limit");

                    b.HasKey("Id")
                        .HasName("pk_board_columns");

                    b.HasIndex("BoardId")
                        .HasDatabaseName("ix_board_columns_board_id");

                    b.ToTable("board_columns", (string)null);
                });

            modelBuilder.Entity("Domain.Organizations.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_organizations");

                    b.ToTable("organizations", (string)null);
                });

            modelBuilder.Entity("Domain.Projects.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_projects_organization_id");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("Domain.Retrospectives.Retrospective", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("MaxVotesPerUser")
                        .HasColumnType("integer")
                        .HasColumnName("max_votes_per_user");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_retrospectives");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_retrospectives_team_id");

                    b.ToTable("retrospectives", (string)null);
                });

            modelBuilder.Entity("Domain.Retrospectives.RetrospectiveColumn", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<Guid>("RetrospectiveId")
                        .HasColumnType("uuid")
                        .HasColumnName("retrospective_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_retrospective_columns");

                    b.HasIndex("RetrospectiveId")
                        .HasDatabaseName("ix_retrospective_columns_retrospective_id");

                    b.ToTable("retrospective_columns", (string)null);
                });

            modelBuilder.Entity("Domain.Retrospectives.RetrospectiveItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<Guid>("RetrospectiveColumnId")
                        .HasColumnType("uuid")
                        .HasColumnName("retrospective_column_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Votes")
                        .HasColumnType("integer")
                        .HasColumnName("votes");

                    b.HasKey("Id")
                        .HasName("pk_retrospective_items");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_retrospective_items_author_id");

                    b.HasIndex("RetrospectiveColumnId")
                        .HasDatabaseName("ix_retrospective_items_retrospective_column_id");

                    b.ToTable("retrospective_items", (string)null);
                });

            modelBuilder.Entity("Domain.Sprints.Sprint", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_sprints");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_sprints_team_id");

                    b.ToTable("sprints", (string)null);
                });

            modelBuilder.Entity("Domain.Tags.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("ProjectId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_tags_project_id_name");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("Domain.Teams.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_teams_project_id");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("image_url");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_identity_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_users_team_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.WikiPages.WikiPage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("ParentWikiPageId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_wiki_page_id");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_wiki_pages");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_wiki_pages_author_id");

                    b.HasIndex("ParentWikiPageId")
                        .HasDatabaseName("ix_wiki_pages_parent_wiki_page_id");

                    b.HasIndex("ProjectId", "ParentWikiPageId", "Position")
                        .HasDatabaseName("ix_wiki_pages_project_id_parent_wiki_page_id_position");

                    b.ToTable("wiki_pages", (string)null);
                });

            modelBuilder.Entity("Domain.WikiPages.WikiPageComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uuid")
                        .HasColumnName("wiki_page_id");

                    b.HasKey("Id")
                        .HasName("pk_wiki_page_comments");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_wiki_page_comments_author_id");

                    b.HasIndex("WikiPageId")
                        .HasDatabaseName("ix_wiki_page_comments_wiki_page_id");

                    b.ToTable("wiki_page_comments", (string)null);
                });

            modelBuilder.Entity("Domain.WikiPages.WikiPageView", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ViewedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("viewed_at");

                    b.Property<Guid>("ViewerId")
                        .HasColumnType("uuid")
                        .HasColumnName("viewer_id");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uuid")
                        .HasColumnName("wiki_page_id");

                    b.HasKey("Id")
                        .HasName("pk_wiki_page_views");

                    b.HasIndex("WikiPageId")
                        .HasDatabaseName("ix_wiki_page_views_wiki_page_id");

                    b.ToTable("wiki_page_views", (string)null);
                });

            modelBuilder.Entity("Domain.WorkItems.WorkItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AcceptanceCriteria")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("acceptance_criteria");

                    b.Property<Guid?>("AssignedTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("assigned_team_id");

                    b.Property<Guid?>("AssigneeId")
                        .HasColumnType("uuid")
                        .HasColumnName("assignee_id");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("ParentWorkItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_work_item_id");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Vector>("SearchVector")
                        .HasColumnType("vector")
                        .HasColumnName("search_vector");

                    b.Property<Guid?>("SprintId")
                        .HasColumnType("uuid")
                        .HasColumnName("sprint_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Classification", "Domain.WorkItems.WorkItem.Classification#Classification", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("ValueArea")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("classification_value_area");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Planning", "Domain.WorkItems.WorkItem.Planning#Planning", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int?>("Priority")
                                .HasColumnType("integer")
                                .HasColumnName("planning_priority");

                            b1.Property<int?>("StoryPoints")
                                .HasColumnType("integer")
                                .HasColumnName("planning_story_points");
                        });

                    b.HasKey("Id")
                        .HasName("pk_work_items");

                    b.HasIndex("AssignedTeamId")
                        .HasDatabaseName("ix_work_items_assigned_team_id");

                    b.HasIndex("AssigneeId")
                        .HasDatabaseName("ix_work_items_assignee_id");

                    b.HasIndex("ParentWorkItemId")
                        .HasDatabaseName("ix_work_items_parent_work_item_id");

                    b.HasIndex("SprintId")
                        .HasDatabaseName("ix_work_items_sprint_id");

                    b.HasIndex("ProjectId", "Code")
                        .IsUnique()
                        .HasDatabaseName("ix_work_items_project_id_code");

                    b.ToTable("work_items", (string)null);
                });

            modelBuilder.Entity("Domain.WorkItems.WorkItemComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("WorkItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("work_item_id");

                    b.HasKey("Id")
                        .HasName("pk_work_item_comments");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_work_item_comments_user_id");

                    b.HasIndex("WorkItemId")
                        .HasDatabaseName("ix_work_item_comments_work_item_id");

                    b.ToTable("work_item_comments", (string)null);
                });

            modelBuilder.Entity("OrganizationUser", b =>
                {
                    b.Property<Guid>("MembersId")
                        .HasColumnType("uuid")
                        .HasColumnName("members_id");

                    b.Property<Guid>("OrganizationsId")
                        .HasColumnType("uuid")
                        .HasColumnName("organizations_id");

                    b.HasKey("MembersId", "OrganizationsId")
                        .HasName("pk_organization_user");

                    b.HasIndex("OrganizationsId")
                        .HasDatabaseName("ix_organization_user_organizations_id");

                    b.ToTable("organization_user", (string)null);
                });

            modelBuilder.Entity("TagWorkItem", b =>
                {
                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid")
                        .HasColumnName("tags_id");

                    b.Property<Guid>("WorkItemsId")
                        .HasColumnType("uuid")
                        .HasColumnName("work_items_id");

                    b.HasKey("TagsId", "WorkItemsId")
                        .HasName("pk_work_item_tags");

                    b.HasIndex("WorkItemsId")
                        .HasDatabaseName("ix_work_item_tags_work_items_id");

                    b.ToTable("work_item_tags", (string)null);
                });

            modelBuilder.Entity("Domain.Boards.Board", b =>
                {
                    b.HasOne("Domain.Teams.Team", "Team")
                        .WithOne("Board")
                        .HasForeignKey("Domain.Boards.Board", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_boards_teams_team_id");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Boards.BoardCard", b =>
                {
                    b.HasOne("Domain.Boards.BoardColumn", "BoardColumn")
                        .WithMany("Cards")
                        .HasForeignKey("BoardColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_board_cards_board_columns_board_column_id");

                    b.HasOne("Domain.WorkItems.WorkItem", "WorkItem")
                        .WithMany()
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_board_cards_work_items_work_item_id");

                    b.Navigation("BoardColumn");

                    b.Navigation("WorkItem");
                });

            modelBuilder.Entity("Domain.Boards.BoardColumn", b =>
                {
                    b.HasOne("Domain.Boards.Board", "Board")
                        .WithMany("Columns")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_board_columns_boards_board_id");

                    b.Navigation("Board");
                });

            modelBuilder.Entity("Domain.Projects.Project", b =>
                {
                    b.HasOne("Domain.Organizations.Organization", "Organization")
                        .WithMany("Projects")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_projects_organizations_organization_id");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Domain.Retrospectives.Retrospective", b =>
                {
                    b.HasOne("Domain.Teams.Team", "Team")
                        .WithMany("Retrospectives")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_retrospectives_teams_team_id");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Retrospectives.RetrospectiveColumn", b =>
                {
                    b.HasOne("Domain.Retrospectives.Retrospective", "Retrospective")
                        .WithMany("Columns")
                        .HasForeignKey("RetrospectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_retrospective_columns_retrospectives_retrospective_id");

                    b.Navigation("Retrospective");
                });

            modelBuilder.Entity("Domain.Retrospectives.RetrospectiveItem", b =>
                {
                    b.HasOne("Domain.Users.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_retrospective_items_users_author_id");

                    b.HasOne("Domain.Retrospectives.RetrospectiveColumn", "RetrospectiveColumn")
                        .WithMany("Items")
                        .HasForeignKey("RetrospectiveColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_retrospective_items_retrospective_columns_retrospective_col");

                    b.Navigation("Author");

                    b.Navigation("RetrospectiveColumn");
                });

            modelBuilder.Entity("Domain.Sprints.Sprint", b =>
                {
                    b.HasOne("Domain.Teams.Team", "Team")
                        .WithMany("Sprints")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sprints_teams_team_id");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Tags.Tag", b =>
                {
                    b.HasOne("Domain.Projects.Project", "Project")
                        .WithMany("Tags")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_tags_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Teams.Team", b =>
                {
                    b.HasOne("Domain.Projects.Project", "Project")
                        .WithMany("Teams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teams_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.HasOne("Domain.Teams.Team", null)
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("fk_users_teams_team_id");
                });

            modelBuilder.Entity("Domain.WikiPages.WikiPage", b =>
                {
                    b.HasOne("Domain.Users.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_wiki_pages_users_author_id");

                    b.HasOne("Domain.WikiPages.WikiPage", "ParentWikiPage")
                        .WithMany("SubWikiPages")
                        .HasForeignKey("ParentWikiPageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_wiki_pages_wiki_pages_parent_wiki_page_id");

                    b.HasOne("Domain.Projects.Project", null)
                        .WithMany("WikiPages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wiki_pages_projects_project_id");

                    b.Navigation("Author");

                    b.Navigation("ParentWikiPage");
                });

            modelBuilder.Entity("Domain.WikiPages.WikiPageComment", b =>
                {
                    b.HasOne("Domain.Users.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wiki_page_comments_users_author_id");

                    b.HasOne("Domain.WikiPages.WikiPage", "WikiPage")
                        .WithMany("Comments")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wiki_page_comments_wiki_pages_wiki_page_id");

                    b.Navigation("Author");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("Domain.WikiPages.WikiPageView", b =>
                {
                    b.HasOne("Domain.WikiPages.WikiPage", "WikiPage")
                        .WithMany("Views")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wiki_page_views_wiki_pages_wiki_page_id");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("Domain.WorkItems.WorkItem", b =>
                {
                    b.HasOne("Domain.Teams.Team", "AssignedTeam")
                        .WithMany("WorkItems")
                        .HasForeignKey("AssignedTeamId")
                        .HasConstraintName("fk_work_items_teams_assigned_team_id");

                    b.HasOne("Domain.Users.User", "Assignee")
                        .WithMany("WorkItems")
                        .HasForeignKey("AssigneeId")
                        .HasConstraintName("fk_work_items_users_assignee_id");

                    b.HasOne("Domain.WorkItems.WorkItem", "ParentWorkItem")
                        .WithMany("ChildWorkItems")
                        .HasForeignKey("ParentWorkItemId")
                        .HasConstraintName("fk_work_items_work_items_parent_work_item_id");

                    b.HasOne("Domain.Projects.Project", "Project")
                        .WithMany("WorkItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_work_items_projects_project_id");

                    b.HasOne("Domain.Sprints.Sprint", "Sprint")
                        .WithMany("WorkItems")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_work_items_sprints_sprint_id");

                    b.Navigation("AssignedTeam");

                    b.Navigation("Assignee");

                    b.Navigation("ParentWorkItem");

                    b.Navigation("Project");

                    b.Navigation("Sprint");
                });

            modelBuilder.Entity("Domain.WorkItems.WorkItemComment", b =>
                {
                    b.HasOne("Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_work_item_comments_users_user_id");

                    b.HasOne("Domain.WorkItems.WorkItem", "WorkItem")
                        .WithMany("Comments")
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_work_item_comments_work_items_work_item_id");

                    b.Navigation("User");

                    b.Navigation("WorkItem");
                });

            modelBuilder.Entity("OrganizationUser", b =>
                {
                    b.HasOne("Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_user_users_members_id");

                    b.HasOne("Domain.Organizations.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_user_organizations_organizations_id");
                });

            modelBuilder.Entity("TagWorkItem", b =>
                {
                    b.HasOne("Domain.Tags.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_work_item_tags_tags_tags_id");

                    b.HasOne("Domain.WorkItems.WorkItem", null)
                        .WithMany()
                        .HasForeignKey("WorkItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_work_item_tags_work_items_work_items_id");
                });

            modelBuilder.Entity("Domain.Boards.Board", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("Domain.Boards.BoardColumn", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Domain.Organizations.Organization", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Domain.Projects.Project", b =>
                {
                    b.Navigation("Tags");

                    b.Navigation("Teams");

                    b.Navigation("WikiPages");

                    b.Navigation("WorkItems");
                });

            modelBuilder.Entity("Domain.Retrospectives.Retrospective", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("Domain.Retrospectives.RetrospectiveColumn", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Sprints.Sprint", b =>
                {
                    b.Navigation("WorkItems");
                });

            modelBuilder.Entity("Domain.Teams.Team", b =>
                {
                    b.Navigation("Board")
                        .IsRequired();

                    b.Navigation("Members");

                    b.Navigation("Retrospectives");

                    b.Navigation("Sprints");

                    b.Navigation("WorkItems");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Navigation("WorkItems");
                });

            modelBuilder.Entity("Domain.WikiPages.WikiPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("SubWikiPages");

                    b.Navigation("Views");
                });

            modelBuilder.Entity("Domain.WorkItems.WorkItem", b =>
                {
                    b.Navigation("ChildWorkItems");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
